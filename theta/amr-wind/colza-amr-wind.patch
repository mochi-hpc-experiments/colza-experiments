diff --git a/CMakeLists.txt b/CMakeLists.txt
index d41bd473..0d994a71 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -38,6 +38,7 @@ option(AMR_WIND_ENABLE_MASA "Enable MASA library" OFF)
 option(AMR_WIND_ENABLE_HYPRE "Enable HYPRE integration" OFF)
 option(AMR_WIND_ENABLE_OPENFAST "Enable OpenFAST integration" OFF)
 option(AMR_WIND_ENABLE_ASCENT "Enable Ascent visualization library" OFF)
+option(AMR_WIND_ENABLE_COLZA "Enable Colza staging area (implies AMR_WIND_ENABLE_ASCENT)" OFF)
 
 #Options for C++
 set(CMAKE_CXX_STANDARD 14)
@@ -137,6 +138,13 @@ if(AMR_WIND_ENABLE_OPENFAST)
   target_link_libraries(${amr_wind_lib_name} PUBLIC ${OpenFAST_LIBRARIES})
 endif()
 
+if(AMR_WIND_ENABLE_COLZA)
+  if(NOT AMR_WIND_ENABLE_ASCENT)
+    message(WARNING "AMR_WIND_ENABLE_COLZA requires AMR_WIND_ENABLE_ASCENT, AMR_WIND_ENABLE_ASCENT will be set to ON")
+    set(AMR_WIND_ENABLE_ASCENT ON)
+  endif()
+endif()
+
 if(AMR_WIND_ENABLE_ASCENT)
   set(CMAKE_PREFIX_PATH ${ASCENT_DIR} ${CMAKE_PREFIX_PATH})
   find_package(Ascent QUIET REQUIRED)
@@ -147,6 +155,11 @@ if(AMR_WIND_ENABLE_ASCENT)
   target_compile_definitions(${amr_wind_lib_name} PRIVATE AMR_WIND_USE_ASCENT)
 endif()
 
+if(AMR_WIND_ENABLE_COLZA)
+  find_package(colza REQUIRED)
+  target_link_libraries(${amr_wind_lib_name} PUBLIC colza-client)
+endif()
+
 #Build amr-wind and link to amrex library
 generate_version_info()
 add_subdirectory(amr-wind)
diff --git a/amr-wind/utilities/CMakeLists.txt b/amr-wind/utilities/CMakeLists.txt
index 60c65563..ad748c5a 100644
--- a/amr-wind/utilities/CMakeLists.txt
+++ b/amr-wind/utilities/CMakeLists.txt
@@ -26,3 +26,7 @@ endif()
 if (AMR_WIND_ENABLE_ASCENT)
    add_subdirectory(ascent)
 endif()
+
+if (AMR_WIND_ENABLE_COLZA)
+   add_subdirectory(colza)
+endif()
diff --git a/amr-wind/utilities/colza/CMakeLists.txt b/amr-wind/utilities/colza/CMakeLists.txt
new file mode 100644
index 00000000..ac2e0fc9
--- /dev/null
+++ b/amr-wind/utilities/colza/CMakeLists.txt
@@ -0,0 +1,4 @@
+target_sources(${amr_wind_lib_name}
+  PRIVATE
+    colza.cpp
+  )
diff --git a/amr-wind/utilities/colza/colza.H b/amr-wind/utilities/colza/colza.H
new file mode 100644
index 00000000..5131f86b
--- /dev/null
+++ b/amr-wind/utilities/colza/colza.H
@@ -0,0 +1,58 @@
+#ifndef COLZA_INT_H
+#define COLZA_INT_H
+
+#include "amr-wind/utilities/PostProcessing.H"
+#include <colza/Client.hpp>
+#include <colza/MPIClientCommunicator.hpp>
+
+/**
+ * Colza In-situ Integration with Ascent pipelines
+ */
+
+namespace amr_wind {
+
+class Field;
+
+namespace colza_int {
+
+class ColzaPostProcess : public PostProcessBase::Register<ColzaPostProcess>
+{
+public:
+    static const std::string identifier() { return "Colza"; }
+
+    ColzaPostProcess(CFDSim&, const std::string&);
+
+    virtual ~ColzaPostProcess();
+
+    //! Perform actions before mesh is created
+    void pre_init_actions() override;
+
+    //! Read user inputs and create the different data probe instances
+    void initialize() override;
+
+    //! Interpolate fields at a given timestep and output to disk
+    void post_advance_work() override;
+
+    //! Actions to perform post regrid e.g. redistribute particles
+    void post_regrid_actions() override;
+
+protected:
+private:
+    CFDSim& m_sim;
+    std::string m_label;
+
+    amrex::Vector<std::string> m_var_names;
+    amrex::Vector<Field*> m_fields;
+
+    int m_out_freq{1};
+
+    thallium::engine                 m_thallium_engine;
+    colza::MPIClientCommunicator     m_colza_comm;
+    colza::Client                    m_colza_client;
+    colza::DistributedPipelineHandle m_colza_pipeline;
+};
+
+} // namespace colza_int
+} // namespace amr_wind
+
+#endif
diff --git a/amr-wind/utilities/colza/colza.cpp b/amr-wind/utilities/colza/colza.cpp
new file mode 100644
index 00000000..5b5ce53e
--- /dev/null
+++ b/amr-wind/utilities/colza/colza.cpp
@@ -0,0 +1,150 @@
+#include "colza.H"
+
+#include "amr-wind/CFDSim.H"
+#include "amr-wind/utilities/io_utils.H"
+
+#include "AMReX_ParmParse.H"
+#include "AMReX_Conduit_Blueprint.H"
+
+#include <ascent.hpp>
+#include <colza/Client.hpp>
+#include <colza/MPIClientCommunicator.hpp>
+#include <ssg.h>
+
+namespace amr_wind {
+namespace colza_int {
+
+ColzaPostProcess::ColzaPostProcess(CFDSim& sim, const std::string& label)
+    : m_sim(sim), m_label(label), m_colza_comm(amrex::ParallelDescriptor::Communicator())
+{}
+
+ColzaPostProcess::~ColzaPostProcess()
+{
+    BL_PROFILE("amr-wind::ColzaPostProcess::~ColzaPostProcess");
+
+    m_colza_pipeline = colza::DistributedPipelineHandle();
+    m_colza_client = colza::Client();
+    ssg_finalize();
+    m_thallium_engine.finalize();
+}
+
+void ColzaPostProcess::pre_init_actions() {}
+
+void ColzaPostProcess::initialize()
+{
+    BL_PROFILE("amr-wind::ColzaPostProcess::initialize");
+
+    amrex::Vector<std::string> field_names;
+
+    std::string colza_protocol;
+    int         colza_provider_id{0};
+    std::string colza_ssg_file;
+    std::string colza_pipeline_name;
+
+    {
+        amrex::ParmParse pp("colza");
+        pp.getarr("fields", field_names);
+        pp.query("output_frequency", m_out_freq);
+        pp.get("protocol", colza_protocol);
+        pp.query("provider_id", colza_provider_id);
+        pp.get("ssg_file", colza_ssg_file);
+        pp.get("pipeline_name", colza_pipeline_name);
+    }
+
+    // Process field information
+    auto& repo = m_sim.repo();
+
+    for (const auto& fname : field_names) {
+        if (!repo.field_exists(fname)) {
+            amrex::Print() << "WARNING: Colza: Non-existent field requested: "
+                           << fname << std::endl;
+            continue;
+        }
+
+        auto& fld = repo.get_field(fname);
+        m_fields.emplace_back(&fld);
+        ioutils::add_var_names(m_var_names, fld.name(), fld.num_comp());
+    }
+
+    // Initialize thallium, Colza client, and pipeline handle
+    m_thallium_engine = thallium::engine(colza_protocol, THALLIUM_SERVER_MODE, false, 0);
+    ssg_init();
+    m_colza_client = colza::Client(m_thallium_engine);
+    m_colza_pipeline = m_colza_client.makeDistributedPipelineHandle(
+        &m_colza_comm, colza_ssg_file, (uint16_t)colza_provider_id, colza_pipeline_name);
+}
+
+void ColzaPostProcess::post_advance_work()
+{
+    BL_PROFILE("amr-wind::ColzaPostProcess::post_advance_work");
+
+    const auto& time = m_sim.time();
+    const int tidx = time.time_index();
+    // Output only on given frequency
+    if (!(tidx % m_out_freq == 0)) return;
+
+    amrex::Vector<int> istep(
+        m_sim.mesh().finestLevel() + 1, m_sim.time().time_index());
+
+    int plt_num_comp = 0;
+    for (auto* fld : m_fields) {
+        plt_num_comp += fld->num_comp();
+    }
+
+    auto outfield = m_sim.repo().create_scratch_field(plt_num_comp);
+
+    const int nlevels = m_sim.repo().num_active_levels();
+
+    for (int lev = 0; lev < nlevels; ++lev) {
+        int icomp = 0;
+        auto& mf = (*outfield)(lev);
+
+        for (auto* fld : m_fields) {
+            amrex::MultiFab::Copy(
+                mf, (*fld)(lev), 0, icomp, fld->num_comp(), 0);
+            icomp += fld->num_comp();
+        }
+    }
+
+    const auto& mesh = m_sim.mesh();
+
+    amrex::Print() << "Calling Colza at time " << m_sim.time().new_time()
+                   << std::endl;
+    conduit::Node bp_mesh;
+    amrex::MultiLevelToBlueprint(
+        nlevels, outfield->vec_const_ptrs(), m_var_names, mesh.Geom(),
+        m_sim.time().new_time(), istep, mesh.refRatio(), bp_mesh);
+
+    conduit::Node verify_info;
+    if (!conduit::blueprint::mesh::verify(bp_mesh, verify_info)) {
+        ASCENT_INFO("Error: Mesh Blueprint Verify Failed!");
+        verify_info.print();
+    }
+
+    int rank;
+    MPI_Comm_rank(amrex::ParallelDescriptor::Communicator(), &rank);
+
+    auto mesh_str = bp_mesh.to_string("conduit_base64_json", 0, 0, "", "");
+
+    std::vector<size_t>  dimensions = { mesh_str.size()+1 };
+    std::vector<int64_t> offsets    = { 0 };
+
+    int32_t result;
+    m_colza_pipeline.start((uint64_t)tidx);
+
+    m_colza_pipeline.stage("mesh", (uint64_t)tidx, rank, dimensions, offsets,
+                           colza::Type::UINT8, mesh_str.c_str(),
+                           &result);
+
+    m_colza_pipeline.execute((uint64_t)tidx);
+
+    m_colza_pipeline.cleanup((uint64_t)tidx);
+}
+
+void ColzaPostProcess::post_regrid_actions()
+{
+    // nothing to do here
+}
+
+} // namespace ascent_int
+} // namespace amr_wind
